<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, May 23, 2014, 9:00 AM -->
<!-- MuClient version 4.84 -->

<!-- Plugin "ATS_Exp_Bar" generated by Plugin Wizard -->

<muclient>
<plugin
   name="ATS_Exp_Bar"
   author="Qon @ TrekMUSH"
   id="3c628de45ada3cb07b9b1448"
   language="Lua"
   purpose="Shows Experience bar for ATS TrekMUSH"
   date_written="2014-05-23 08:54:00"
   requires="4.84"
   version="1.0"
   save_state="y"
   >
<description trim="y">
<![CDATA[
This will generate an XP bar for use with ATS TrekMUSH.
You must first do a 'char sheet', or 'char attrib list' to setup the bar.

Anytime you level, you must do that again.  (Until I am able to catch the level)

]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="ATS_Exp_Bar:help"
   enabled="y"
  >
  </alias>
</aliases>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="xpwindow"
   match="    Experience * (* needed to level up)"
   script="fun_xp_char_sheet"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="xpwindow"
   match="Level              *    Experience         * (* needed)"
   script="fun_xp_attr_list"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="xpwindow"
   match="You earn * experience points for *"
   script="fun_xpearned"
   sequence="100"
  >
  </trigger>
</triggers>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end

win = GetPluginID ()  -- get a unique name

current_xp = tonumber(GetVariable("ATS_CURRENT_XP"))
if not current_xp  then
	SetVariable("ATS_CURRENT_XP", "0")
	current_xp = 0
end

max_xp = tonumber(GetVariable("ATS_XP_REQUIRED"))
if  not max_xp then
	SetVariable("ATS_XP_REQUIRED", "0")
	max_xp = 0
end

level = tonumber(GetVariable("ATS_LEVEL"))
if not level then
	level = 0
	SetVariable("ATS_LEVEL", "0")
end

-- configuration

exp_table = { 1000, 3000, 6000, 10000, 15000, 21000, 28000, 36000, 45000, 55000, 66000, 78000, 91000, 105000, 120000, 136000, 153000, 171000, 190000 }

GAUGE_HEIGHT = 11
NUMBER_OF_TICKS = 20

BACKGROUND_COLOUR = ColourNameToRGB "gray"
BOX_COLOUR = ColourNameToRGB "dodgerblue"

-- draw the bar here, on getting the prompt, or window resize
function draw_bar ()
	
  -- check numbers for validity
  if not current_xp or  
     not max_xp or
     current_xp < 0 or
     max_xp <= 0 then
     return
  end -- if

  -- cannot have more than max xp
  if current_xp > max_xp then
     current_xp = max_xp
  end -- if
  SaveState () -- Saves state so we don't have to call it in each of our functions., only when we redraw.
 -- width is window width minus 2
 local gauge_width = GetInfo (281) - 2
 
 -- make room for the bar
 local bottom_margin = GetInfo (275)
 
 -- adjust text rectangle, keeping existing settings where possible
 if bottom_margin == 0 or 
    (bottom_margin < 0 and math.abs (bottom_margin) < (GAUGE_HEIGHT + 2)) then
   TextRectangle(GetInfo (272), GetInfo (273),   -- left, top
                  GetInfo (274), -- right
                  - (GAUGE_HEIGHT + 2),  -- bottom (gauge height plus 2 more)
                  GetInfo (276), GetInfo (282) or 0, GetInfo (277),  --  BorderOffset, BorderColour, BorderWidth
                  GetInfo (278), GetInfo (279)) -- OutsideFillColour, OutsideFillStyle
 end -- if
  
 -- make the miniwindow
 WindowCreate (win, 
             0, 0,   -- left, top (auto-positions)
             gauge_width,     -- width
             GAUGE_HEIGHT,  -- height
             10,       -- auto-position: bottom left
             0,  -- flags
             BACKGROUND_COLOUR) 
  
  WindowRectOp (win, 2, 0, 0, 0, 0, BACKGROUND_COLOUR)  -- fill entire box
 
  -- how far through the level we are 
  local done = current_xp / max_xp
  local bar_width = gauge_width * done
 
  -- box size must be > 0 or WindowGradient fills the whole thing 
  if math.floor (bar_width) > 0 then
    
    -- top half
    WindowGradient (win, 0, 0, 
                    bar_width, GAUGE_HEIGHT / 2, 
                    0x000000,  -- black
                    BOX_COLOUR, 
                    2)   -- vertical gradient
    
    -- bottom half
    WindowGradient (win, 0, GAUGE_HEIGHT / 2, 
                    bar_width, 0, 
                    BOX_COLOUR,
                    0x000000,  -- black
                    2)   -- vertical gradient

  end -- any experience to speak of
  
  -- show ticks
  local ticks_at = gauge_width / NUMBER_OF_TICKS
  
  -- ticks
  for i = 1, NUMBER_OF_TICKS do
    WindowLine (win, i * ticks_at, 0, i * ticks_at, GAUGE_HEIGHT, ColourNameToRGB ("silver"), 0, 1)
  end -- for

  -- draw a box around it
  check (WindowRectOp (win, 1, 0, 0, 0, 0, ColourNameToRGB ("lightgrey")))  -- frame entire box
    
  -- ensure window visible
  WindowShow (win, true)
  
end -- draw_bar

function fun_xp_char_sheet(name, line, wildcards, styles)
	level = findlevel(tonumber(wildcards[1]) + tonumber(wildcards[2])) -- Exp needed for level
	if ( level >0) then	
		current_xp = (tonumber(wildcards[1] ) - exp_table[level == 1 and level or level-1])
		max_xp = current_xp + tonumber(wildcards[2])
	else
		current_xp = tonumber(wildcards[1])
		max_xp = tonumber(wildcards[2])
	end
	SetVariable("ATS_LEVEL", level)
	SetVariable("ATS_CURRENT_XP", current_xp)
	SetVariable("ATS_REQUIRED_XP", max_xp)
	draw_bar ()
end
  
function fun_xp_attr_list(name,line,wildcards,styles)
	level = tonumber(wildcards[1])
	current_xp = (tonumber(wildcards[2]) - exp_table[level-1])
	max_xp = (tonumber(wildcards[3]) - exp_table[level-1])
	SetVariable("ATS_LEVEL", level)
	SetVariable("ATS_CURRENT_XP", current_xp)
	SetVariable("ATS_REQUIRED_XP", max_xp)
	draw_bar()
  end

function fun_xpearned(name,line,wildcards,styles)
	current_xp = (current_xp + tonumber(wildcards[1]))
	SetVariable("ATS_CURRENT_XP", current_xp)
	draw_bar()
	
end

function fun_manualset(xp, maxxp)

	current_xp = tonumber(xp)
	max_xp = tonumber(maxxp)
	draw_bar()
end
-- When called, returns the XP required for level (level).
-- E.g.
-- fun_xp_req(5) -- Will return 10000, the exp required to go from level 4 to level 5.

function findlevel(xp)
	for i,v in ipairs(exp_table) do 
		if(v == xp) then 
			return i 
		end 
	end
end
  
function OnPluginConnect ()
	draw_bar()
end -- function
function OnPluginWorldOutputResized ()
  draw_bar ()
end -- function
 
-- hide window on removal
function OnPluginClose ()
  WindowShow (win,  false)  -- hide it
end -- OnPluginClose

-- hide window on disable
function OnPluginDisable ()
  WindowShow (win,  false)  -- hide it
end -- OnPluginDisable

draw_bar()
]]>

</script> 
</muclient>
