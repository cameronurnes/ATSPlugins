<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, October 15, 2008, 12:49 PM -->
<!-- MuClient version 4.37 -->

<!-- Plugin "Paste_As_MUSH" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Paste_As_MUSH"
   author="Malix@8bit"
   id="14f4885e803e076273a4767a"
   language="Lua"
   purpose="Insert clipboard contents converted to MushCode"
   date_written="2008-10-15 12:47:54"
   requires="3.69"
   version="1.22"
   >
<description trim="y">
<![CDATA[
This plugin allows you to insert the contents of the clipboard converted into MUSH format into the command window.

Just Ctrl-Click to bring up the alias menu, then click Paste As MUSH.

If it doesn't work, check if scripts are enabled(Shift-Ctrl-6).
Now supports [ansi()] calls. Must be wrapped fully in []'s to work.

'Paste_As_MUSH:help' brings up this text.
]]>
</description>

</plugin>


<!--  Aliases  -->

<aliases>
  <alias
   name="Paste_as_MUSH"
   script="PasteAsMUSH"
   match="PasteAsMUSH"
   enabled="y"
   menu="y"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
function isFANSI(sChar) -- Return true if it's an extended character.
  uchr = string.byte(sChar)
  if (uchr == 1) or (uchr >= 3 and uchr <= 6) or (uchr >= 14 and uchr <= 26) or (uchr >= 28 and uchr <= 31) or 
     (uchr >= 127 and uchr <= 254) then
    return true
  else
    return false
  end -- if
end -- function

-- build the escape table(easiest way to do this in Lua, other languages a select case would work)
escapeTable = {}
function buildEscapeTable()
  local sChars = "()[]{}\\%,"
  local i = 0
  local len = string.len(sChars)
  while i < len do
    i = i + 1
    escapeTable[string.byte(sChars, i)] = true
  end -- while
end -- function
buildEscapeTable()

-- Do the actual conversion/escaping
function convertAnsi2MUSH(sInput)
  local tOut = {}
  local len = string.len(sInput)
  local i = 0
  local ansi = 0
  local srch = 0
  local charCount = 0
  while (i < len) do
    i = i + 1
    thisChar = string.sub(sInput, i, i)
    -- Count how many time the current character is repeated.
    charCount = 1
    if (string.sub(sInput, i+1, i+1) == thisChar) then
      -- If the next character is the same as the current character, start counting how many times it's repeated.
      charCount = 2
      srch = i + 2
      while (srch < len) and (thisChar == string.sub(sInput, srch, srch)) do
        srch = srch + 1
        charCount = charCount + 1
      end -- while
      i = srch - 1
    end -- if
    -- Append the code to the output string.
    if thisChar == " " then
      -- If the character is a space then...
      if (charCount == 1) and (i > 1 and i < len) then
        -- If it's only one space and it's not the first character, don't bother escaping.
        table.insert(tOut, " ")
      elseif (charCount <= 4) then
        -- If it's 4 or less spaces, just escape them into %b.
        table.insert(tOut, string.rep("%b", charCount))
      else
        -- If it's more than 4, it's more efficient to convert it to a [space()] call.
        table.insert(tOut, "[space(" .. tostring(charCount) .. ")]")
      end -- if
    elseif isFANSI(thisChar) then
      -- If the character is a FANSI character then...
      if (charCount == 1) then
        -- If it's not repeated, just convert to c() without the second argument.
        table.insert(tOut, "[c(" .. string.byte(thisChar) .. ")]")
      else
        -- If it's more than one, convert it to a c() with the second argument.
        table.insert(tOut, "[c(" .. string.byte(thisChar) .. "," .. tostring(charCount) .. ")]")
      end -- if
    elseif thisChar == "\t" then
      -- If the character is a tab then...
      if (charCount <= 7) then
        -- If there's less than 7 in a row then just escape them.
        table.insert(tOut, string.rep("%t", charCount))
      else
        -- If there's more than 7 in a row, convert it to a repeat().
        table.insert(tOut, "[repeat(%t," .. tostring(charCount) .. ")]")
      end -- if
    elseif thisChar == "\r" then
      -- Do nothing, throw this away.
    elseif thisChar == "\n" then
      -- If the character is a newline then...
      if (charCount <= 7) then
        -- If there's less than 7 in a row then just escape them.
        table.insert(tOut, string.rep("%r", charCount))
      else
        -- If there's more than 7 in a row, convert it to a repeat().
        table.insert(tOut, "[repeat(%r," .. tostring(charCount) .. ")]")
      end -- if
	elseif (thisChar == "[" and string.sub(sInput, i+1, i+5) == "ansi(") then
		local tmp = "[ansi("
		ansi = ansi + 1 -- Count it, so we know when we need to not escape the closing )] later.
		local ii = i+5 -- Skip ahead 5 characters, since we've captured [ansi(" so far.
		while (ii < len) do
			ii = ii + 1
			local this = string.sub(sInput,ii, ii) -- Scan ahead 1 letter at a time until we find a ,
			if (this == ",") then
				tmp = tmp .. ","
				break
			else
				tmp = tmp .. this
			end
		end -- while
		i = ii
		table.insert(tOut, tmp)
	elseif (thisChar == ")" and string.sub(sInput, i+1, i+1) == "]" and ansi > 0) then
		-- Easy enough.. we found closing )]'s and we were expecting them. Close it out and move on
		table.insert(tOut, ")]")
		i = i + 1
    elseif escapeTable[string.byte(thisChar)] then
      -- If the character should be escaped then...
	   if (charCount <= 7) then
        -- If there's less than 7 in a row then just escape them.
        table.insert(tOut, string.rep("\\"..thisChar, charCount))
      else
        -- If there's more than 7 in a row, convert it to a repeat().
        table.insert(tOut, "[repeat(\\" .. thisChar .. "," .. tostring(charCount) .. ")]")
      end -- if
    else
      -- If it's just an ordinary character that doesn't need escaping.
      if (charCount <= 14) then
        -- If there's less than 14 in a row then just append them.
        table.insert(tOut, string.rep(thisChar, charCount))
      else
        -- If there's more than 14 in a row, convert it to a repeat().
        table.insert(tOut, "[repeat(" .. thisChar .. "," .. tostring(charCount) .. ")]")
      end -- if
    end -- if
  end -- while
  return table.concat(tOut)
end -- function


function PasteAsMUSH()
  PasteCommand(convertAnsi2MUSH(GetClipboard()))
end -- function

]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="Paste_As_MUSH:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
